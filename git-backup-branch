#!/bin/bash

function ask_continue { action_name=$1
  if [[ -z "${action_name}" ]]; then
    action_name="continue"
  fi

  # -s	        do not echo input coming from a terminal
  # -p          prompt	output the string PROMPT without a trailing newline before
  #       attempting to read
  # -r  	  	  do not allow backslashes to escape any characters
  # -n nchars	  return after reading NCHARS characters rather than waiting
  #    		for a newline,
  read -n 1 -r -p "(Press \"y\" to ${action_name}): " input

  # new line but with stderr, escaping capture output
  echo >&2

  if [ "$input" != "Y" ] && [ "$input" != "y" ] && [ "$input" != "ะด" ] && [ "$input" != "ะ" ]; then
    exit
  fi
  echo 1
}

BRANCH=$(git branch --show-current)

NEW_BRANCH_SUFFIX_RAW="$@"

BACKUP_PREFIX="${BRANCH}-backup"

EXISTING_BRANCHES=$(git branch | grep "$BACKUP_PREFIX" | trim | sort -V)

echo -e "# Existing backup branches:\n"
echo -e "$EXISTING_BRANCHES"

if [[ -z "$NEW_BRANCH_SUFFIX_RAW" ]]; then
  exit
fi

POSSIBLE_ACTION="$1"

if [[ "$POSSIBLE_ACTION" == "-d" ]]; then
  BRANCH_TO_DELETE_NUM="$2"

  if [[ -z "$BRANCH_TO_DELETE_NUM" ]]; then
    BRANCH_TO_DELETE_NUM=1
  fi

  BRANCHES_TO_DELETE=$(echo "$EXISTING_BRANCHES" | tail -n "$BRANCH_TO_DELETE_NUM")

  echo -e "\n# Branches to delete:\n"

  echo "$BRANCHES_TO_DELETE"

  if [[ "$(ask_continue 'DELETE THESE BRANCHES')" == "1" ]]; then
  echo "$BRANCHES_TO_DELETE" | while read BRANCH_TO_DELETE ; do
    ( set -x; git branch -d "$BRANCH_TO_DELETE")
  done
fi

  exit
fi

if [[ "$POSSIBLE_ACTION" == "-h" ]]; then
  SCRIPT_NAME="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
  echo -e "
Usage: $SCRIPT_NAME [-d [BRANCHES_NUM_TO_DELETE]] [WHAT_YOU_GONNA_DO]

  Without arguments: will list existing branches"

  exit
fi

EXISTING_BRANCHES_FOR_COMMIT=$(git branch --contains HEAD | grep "$BACKUP_PREFIX" | trim | sort -V)

if [[ -n "$EXISTING_BRANCHES_FOR_COMMIT" ]]; then
  echo -e "\n# Existing backup branches for most recent commit:\n"
  echo -e "$EXISTING_BRANCHES_FOR_COMMIT\n"

  if [[ "$(ask_continue 'delete existing backup branches for most recent commit')" == "1" ]]; then
    echo "$EXISTING_BRANCHES_FOR_COMMIT" | while read BRANCH_TO_DELETE ; do
      ( set -x; git branch -d "$BRANCH_TO_DELETE")
    done
  fi
fi

EXISTING_BRANCHES=$(git branch | grep "$BACKUP_PREFIX" | trim | sort -V)

PREVIOUS_BRANCH=$(echo -e "$EXISTING_BRANCHES" | tail -n 1)

PREVIOUS_BRANCH_PREFIX=$(echo "$PREVIOUS_BRANCH" | sed --regexp-extended "s/${BACKUP_PREFIX}-?//")

PREVIOUS_BRANCH_NUM=$(echo "$PREVIOUS_BRANCH_PREFIX" | grep --only-matching --no-filename --extended-regexp "^[0-9]+")

if [[ -z "$PREVIOUS_BRANCH_NUM" ]]; then
  PREVIOUS_BRANCH_NUM=0
fi

((NEW_BRANCH_NUM = $PREVIOUS_BRANCH_NUM + 1))

NEW_BRANCH_SUFFIX_END=$(echo $NEW_BRANCH_SUFFIX_RAW | sed "s/ /-/g")

NEW_BRANCH_SUFFIX="before-$NEW_BRANCH_SUFFIX_END"

NEW_BRANCH="${BACKUP_PREFIX}-${NEW_BRANCH_NUM}-${NEW_BRANCH_SUFFIX}"

echo

( set -x; git branch "$NEW_BRANCH" )

#echo "+ $NEW_BRANCH"
