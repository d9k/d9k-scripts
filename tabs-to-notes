#!/bin/bash

# Requirements:
#
# 1) ripgrep
#
# https://github.com/BurntSushi/ripgrep
# 
# 2) Copy as Markdown extension for Chrome
# 
# https://chromewebstore.google.com/detail/copy-as-markdown/fkeaekngjflipcockcnpobkpbbfbhmdn
#
# Save lints to file or just copy to clipboard

SCRIPTS_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

OUTPUT_TABS_PATH_PREFIX="$HOME/tx/diary/tabs/tabs-"
# OUTPUT_TABS_PATH_PREFIX="$HOME/tx/notes/fastnote/tabs/tabs-"
# OUTPUT_TABS_PATH_SUFFIX=".txt"
OUTPUT_TABS_PATH_SUFFIX=".md"

OUTPUT_HEADER=$(date +"%Y.%m.%d %H:%M")

DEFAULT_GROUP_NAME="sort"

INPUT_FILE_PATH="$1"

# RIPGREP_URL_PATTERN='[a-z]+://[^)\]#\s]+'
RIPGREP_URL_PATTERN='[a-z]+://[^)\]\s]+'

DIRECTIVE_LINK_IGNORE_FILTERING="tabs-to-notes-allow-sublinks"

if [[ -z "$DEBUG_OUTPUT_FIRST_LINES" ]]; then
  DEBUG_OUTPUT_FIRST_LINES=7
fi

if [ -n "$INPUT_FILE_PATH" ]; then
ALL_LINES_RAW=$(cat "$INPUT_FILE_PATH")
else
  ALL_LINES_RAW=$(xclip -selection clipboard -o)
fi

function all_links_count {
  echo -e "$1" \
    | rg '://' \
    | wc -l
}

# https://www.unix.com/shell-programming-and-scripting/101372-how-sort-strings-length.html
function lines_sort_by_length {
  echo -e "$@" \
    | awk '{ print length(), $0 | "sort -n" }'
}

function ask_continue { action_name="$@"
  if [[ -z "${action_name}" ]]; then
    action_name="continue"
  fi

  # -s	        do not echo input coming from a terminal
  # -p          prompt	output the string PROMPT without a trailing newline before
  #       attempting to read
  # -r  	  	  do not allow backslashes to escape any characters
  # -n nchars	  return after reading NCHARS characters rather than waiting
  #    		for a newline,
  read -n 1 -r -p "(Press \"y\" to ${action_name}): " input

  # new line but with stderr, escaping capture output
  echo >&2

  if [ "$input" != "Y" ] && [ "$input" != "y" ] && [ "$input" != "ะด" ] && [ "$input" != "ะ" ]; then
    exit
  fi
  echo 1
}

# Example:
#
# if [[ "$(ask_continue 'delete existing backup branches for most recent commit')" != "1" ]]; then
#   exit
# fi
#
#
#ASK_RESULT=$(ask_continue "roll back \"$BRANCH\" branch to \"$BRANCH\"/origin and LOSE CHANGES")
#
#if [[ "$ASK_RESULT" != "1" ]]; then
#  exit
#fi

echo "Hint: use DEBUG_OUTPUT_FIRST_LINES=30 before command to configure existing links number to show"
echo
echo "You can add <!-- ${DIRECTIVE_LINK_IGNORE_FILTERING} --> to line with existing link in output file to prevent sublinks being filtered"
echo 

echo $(all_links_count "$ALL_LINES_RAW") "total input links"

ALL_LINES_FILTERED=$(
  echo -e "$ALL_LINES_RAW" \
    | rg --fixed-strings -v "chrome-extension://"
    # rg -v 'chrome'
  # rg -v 'chrome-extension'
  # rg --fixed-strings -v 'chrome-extension'
  # rg --fixed-strings -v 'chrome-extension://'
)

echo $(all_links_count "$ALL_LINES_FILTERED") "filteted input links (not extension tabs)"

# echo "$ALL_LINES_RAW" 

# add group header
ALL_LINES_FIX_UNSORTED_1=$( \
  echo -e "$ALL_LINES_FILTERED" \
  | rg '^((-.*://.*\n)+)' \
    --replace "- ${DEFAULT_GROUP_NAME}\n\$1" \
    --multiline \
    --passthru \
  | sed -e 's|\\n|\n|g'
)

# echo "$ALL_LINES_FIX_UNSORTED_1"

# add padding to tabs withour group
ALL_LINES_FIX_UNSORTED_2=$( \
  echo -e "$ALL_LINES_FIX_UNSORTED_1" \
  | rg '^(-.*://.*)' \
    --replace "  \$1" \
    --multiline \
    --passthru
)

ALL_LINES=$(echo -e "$ALL_LINES_FIX_UNSORTED_2")

# echo -e "$ALL_LINES"

GROUPS_INFO=$( \
  echo -e "$ALL_LINES" \
  | rg -n -v '://' \
  | rg --replace "" '([- \[\]]+)'
)

if [ -z "$GROUPS_INFO" ]; then
  echo
  echo "No groups detected. Exitting"
  exit 1
fi

ALL_LINES_LEN=$(echo -e "$ALL_LINES" | wc -l)

# echo "ALL_LINES_LEN: $ALL_LINES_LEN"

# echo
# echo "GROUPS_INFO:"
# echo -e "$GROUPS_INFO"
# echo

GROUPS_INFO_ARRAY=()

# Set the Internal Field Separator to newline
IFS=$'\n'
  while read LINE; do
      # echo "LINE: $LINE"
      GROUPS_INFO_ARRAY+=("$LINE")
  done <<< "$GROUPS_INFO"
unset IFS

GROUPS_INFO_LEN=${#GROUPS_INFO_ARRAY[@]}

for(( i=0; i<$GROUPS_INFO_LEN; i++ )); do
	GROUP_INFO="${GROUPS_INFO_ARRAY[i]}"
	NEXT_GROUP_INFO="${GROUPS_INFO_ARRAY[i+1]}"

  # echo -e "cur: $GROUP_INFO"
  # echo -e "next: $NEXT_GROUP_INFO"

  GROUP_INFO_PARTS=(${GROUP_INFO//:/ })
  GROUP_NAME_LINE_NUM=${GROUP_INFO_PARTS[0]}
  GROUP_NAME=${GROUP_INFO_PARTS[1]}
  # echo "$GROUP_NAME"
  # echo "$GROUP_NAME_LINE_NUM"

  NEXT_GROUP_INFO_PARTS=(${NEXT_GROUP_INFO//:/ })
  NEXT_GROUP_NAME_LINE_NUM=${NEXT_GROUP_INFO_PARTS[0]}
  # echo "$NEXT_GROUP_NAME_LINE_NUM"
  
  GROUP_LINES_BEGIN=$(expr $GROUP_NAME_LINE_NUM + 1)
  GROUP_LINES_END=$ALL_LINES_LEN

  if [ -n "$NEXT_GROUP_INFO_PARTS" ]; then
    GROUP_LINES_END=$(expr $NEXT_GROUP_NAME_LINE_NUM - 1)
  fi

  # echo "$GROUP_LINES_BEGIN - $GROUP_LINES_END"

  GROUP_LINES_RAW=$(echo "$ALL_LINES" | sed -n "${GROUP_LINES_BEGIN},${GROUP_LINES_END}p")

  # echo -e "$GROUP_LINES_RAW"

  OUTPUT_TABS_PATH="${OUTPUT_TABS_PATH_PREFIX}${GROUP_NAME}${OUTPUT_TABS_PATH_SUFFIX}"
  # echo "$OUTPUT_TABS_PATH"
  # echo

  if [ ! -f "$OUTPUT_TABS_PATH" ]; then
    if [[ "$(ask_continue "create $OUTPUT_TABS_PATH (it doesn't exist yet)")" != "1" ]]; then
      continue
    fi

    echo -e "tabs-$GROUP_NAME\n" > "$OUTPUT_TABS_PATH"
  fi # if not path

  EXISTING_LINKS=$( \
    cat "$OUTPUT_TABS_PATH" \
    | rg -v --fixed-strings -v "$DIRECTIVE_LINK_IGNORE_FILTERING" \
    | rg  $RIPGREP_URL_PATTERN \
      --only-matching 
    # | rg  '[a-z]+://[^)\]#\s]+' \
  )

  EXISTING_LINK_SORTED_TEXT=$(lines_sort_by_length "$EXISTING_LINKS")
  EXISTING_LINKS_LEN=$(echo -e "$EXISTING_LINKS" | wc -l)

  echo
  echo "## These existing links would be exluded from output (beginning link match)"
  echo
  echo -e "$EXISTING_LINK_SORTED_TEXT" | head -n "${DEBUG_OUTPUT_FIRST_LINES}"
  echo "... (showing first ${DEBUG_OUTPUT_FIRST_LINES} of ${EXISTING_LINKS_LEN})"

  # echo -e "$EXISTING_LINK_SORTED_TEXT"

  GROUP_LINES_FILTERED=$(echo -e "$GROUP_LINES_RAW")

  # echo -e $GROUP_LINES_FILTERED

  while read EXISTING_LINK; do
    if [ -z "$EXISTING_LINK" ]; then
      continue
    fi 

    # echo "LINK: $EXISTING_LINK"
    GROUP_LINES_FILTERED=$(\
      echo -e "$GROUP_LINES_FILTERED" \
        | rg --fixed-strings -v "$EXISTING_LINK"
    )
  done <<< "$EXISTING_LINKS"

  echo
  if [ -z "$GROUP_LINES_FILTERED" ]; then
    echo "No lines to add into ${OUTPUT_TABS_PATH}"
    continue
  fi

  GROUP_LINES_RAW_LEN=$(echo -e "$GROUP_LINES_RAW" | wc -l)
  GROUP_LINES_FILTERED_LEN=$(echo -e "$GROUP_LINES_FILTERED" | wc -l)
  GROUP_LINES_DELTA=$(expr $GROUP_LINES_RAW_LEN - $GROUP_LINES_FILTERED_LEN)

  echo
  echo
  echo "## Lines to add:"
  echo
  echo -e "$GROUP_LINES_FILTERED"

  LINES_NUMBER_ADDITIONAL_TEXT=""

  if [ $GROUP_LINES_DELTA -ne 0 ]; then
    LINES_NUMBER_ADDITIONAL_TEXT="($GROUP_LINES_RAW_LEN-$GROUP_LINES_DELTA) "
  fi

  # echo "${GROUP_LINES_RAW_LEN}"

  echo

  if [[ "$(ask_continue "add ${GROUP_LINES_FILTERED_LEN} lines ${LINES_NUMBER_ADDITIONAL_TEXT}to $OUTPUT_TABS_PATH")" != "1" ]]; then
    continue
  fi

  echo Adding...

  echo -e "\n\n## ${OUTPUT_HEADER}\n\n${GROUP_LINES_FILTERED}" >> "${OUTPUT_TABS_PATH}"
done
