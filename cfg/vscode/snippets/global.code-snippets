{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "Vue template comments": {
    "prefix": [
      "vcom",
      "VueCOMments",
      // "///"
    ],
    "body": [
      "<p v-if=\"0\">",
      "  <!--",
      "  -->",
      "</p>"
    ],
    "description": "Comments block"
  },
  "Vue props": {
    "prefix": [
      "Vue_PROps",
      "vpro",
    ],
    "body": [
      "const props = defineProps({",
      "  id: {",
      "    type: Number,",
      "    required: true,",
      "  },",
      "});"
    ]
  },
  "Vue props add number": {
    "prefix": [
      "Vue_Props_add_Number",
      "vpn",
    ],
    "body": [
      "id: {",
      "  type: Number,",
      "  required: true,",
      "},",
    ]
  },
  "Vue props add string": {
    "prefix": [
      "Vue_Props_add_String",
      "vps",
    ],
    "body": [
      "id: {",
      "  type: String,",
      "  required: true,",
      "},",
    ]
  },
  "Vue props add object": {
    "prefix": [
      "Vue_Props_add_Object",
      "vpo",
    ],
    "body": [
      "id: {",
      "  type: Object as PropType<>,",
      "  required: true,",
      "},",
    ]
  },
  "Vue script tag": {
    "prefix": [
      "Vue_Tag_SCript",
      "vtsc",
    ],
    "body": [
      "<script setup lang=\"tsx\">",
      "",
      "</script>"
    ]
  },
  "Vue style tag": {
    "prefix": [
      "Vue_Tag_STyle",
      "vtst",
    ],
    "body": [
      "<style module>",
      "",
      "</style>"
    ]
  },
  "Vue define emits": {
    "prefix": [
      "Vue_Define_Emits",
      "vde",
    ],
    "body": [
      "const emit = defineEmits({",
      "  change: (_: any) => true,",
      "});"
    ]
  },
  "Vue define options": {
    "prefix": [
      "Vue_Define_Options",
      "vdo",
    ],
    "body": [
      "defineOptions({ name: '' });"
    ]
  },
  "Vue define use": {
    "prefix": [
      "Vue_Define_Use",
      "vdu",
    ],
    "body": [
      "export function useNewBlockTypeListItems() {",
      "  return {}",
      "}"
    ]
  },
  "Vue use": {
    "prefix": [
      "Vue_Use",
      "vus",
    ],
    "body": [
      "const = use();",
    ]
  },
  "Vue use store state": {
    "prefix": [
      "Vue_use_STOre_state",
      "vsto",
    ],
    "body": [
      "const storeState = useStoreState();",
    ]
  },
  "Vue class from style module": {
    "prefix": [
      "Vue_CLass_from_style_module",
      "vcl",
    ],
    "body": [
      ":class=\"\\$style.\""
    ]
  },
  // https://stackoverflow.com/questions/65156083/implement-vscode-snippet-for-c-header-guard
  "C++ header guard": {
    "prefix": "cpph",
    "body": [
      "#ifndef ${TM_FILENAME/(?:^.*\\\\src\\\\)?(\\w+)(?!\\w*$)|(\\W)|(\\w+)$/${1:/upcase}${2:+_}${3:/upcase}/g}",
      "#define ${TM_FILENAME/(?:^.*\\\\src\\\\)?(\\w+)(?!\\w*$)|(\\W)|(\\w+)$/${1:/upcase}${2:+_}${3:/upcase}/g}",
      "\n#endif // ${TM_FILENAME/(?:^.*\\\\src\\\\)?(\\w+)(?!\\w*$)|(\\W)|(\\w+)$/${1:/upcase}${2:+_}${3:/upcase}/g}"
    ]
  }
}
