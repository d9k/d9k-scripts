#!/bin/bash

#NODE_OPTIONS='--experimental-repl-await'

ARGS=()

function installation_instructions {
  echo "Installation:"

  echo "run command: \`npm install --no-save tsconfig-paths ttypescript ts-transformer-keys ts-transformer-json-schema\`"

cat <<PRE

// alter tsconfig.json:
{
  "compilerOptions": {
    // ...
    "module": "CommonJS",
    "plugins": [
      { "transform": "ts-transformer-keys/transformer" },
      { "transform": "ts-transformer-json-schema/transformer" }
    ]
  },
  // ...
}

PRE
}

RUN_INSTALLATION_INSTRUCTIONS=

function build_args {
  if [[ -d "node_modules/tsconfig-paths" ]]; then
    ARGS+=("-r" "tsconfig-paths/register")
  else
    echo "tsconfig-paths is required for correctly working import!"
    echo "See https://github.com/dividab/tsconfig-paths"
    echo
    RUN_INSTALLATION_INSTRUCTIONS=1
    return
  fi

  if [[ -d "node_modules/ttypescript" ]]; then
    ARGS+=("--compiler" "ttypescript")
  else
    echo "Running without ttypescript."
    echo "See https://github.com/cevek/ttypescript"
    echo
    RUN_INSTALLATION_INSTRUCTIONS=1
    return
  fi

  if [[ -d "node_modules/ts-transformer-keys" ]]; then
    :
    #ARGS+=("-r" "ts-transformer-keys")
  else
    echo "Running without ts-transformer-keys."
    echo "See https://github.com/kimamula/ts-transformer-keys#ttypescript"
    echo
    RUN_INSTALLATION_INSTRUCTIONS=1
    return
  fi

  if [[ -d "node_modules/ts-transformer-json-schema" ]]; then
    :
    #ARGS+=("-r" "ts-transformer-keys")
  else
    echo "Running without ts-transformer-json-schema."
    echo "See https://github.com/kimamula/ts-transformer-keys#ttypescript"
    echo
    RUN_INSTALLATION_INSTRUCTIONS=1
    return
  fi
}

build_args

if [[ -z "$(RUN_INSTALLATION_INSTRUCTIONS)" ]]; then
  installation_instructions
fi

QUOTED_ARGS=
if [[ -n "${ARGS[0]}" ]]; then
  QUOTED_ARGS=$(printf ' %q' "${ARGS[@]}")
fi

set -x
eval npx ts-node "${QUOTED_ARGS[@]}" "$@"
